from collections import deque
from typing import List, Tuple


class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)
        n2 = len(board) * len(board)
        def lab_to_pos(label: int) -> Tuple[int, int]:
            nonlocal n
            d, r = (label - 1) // n, (label - 1) % n
            col = r if d % 2 == 0 else (n - r - 1)
            return (n - d - 1), col

        def move(label: int) -> int:
            nonlocal board, n
            dest_i, dest_j = lab_to_pos(label)
            # print(n, label, dest_i, dest_j)
            if board[dest_i][dest_j] == -1: return label
            else: return board[dest_i][dest_j]  # snake or ladder
        
        queue = deque([1])  # label, min_dist
        d = {1: 0}  # label -> dist
        while queue:
            curr = queue.popleft()
            if curr == n2: return d[curr]
            for neighbor in range(curr + 1, min(curr + 6, n2) + 1):
                dest = move(neighbor)
                if dest not in d:
                    queue.append(dest)
                    d[dest] = d[curr] + 1
        return -1
    
sol = Solution()
board = \

sol.snakesAndLadders(board)